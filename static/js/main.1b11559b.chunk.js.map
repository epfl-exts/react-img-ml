{"version":3,"sources":["Answer.js","helpers.js","Controls.js","Round.js","App.js","serviceWorker.js","index.js"],"names":["Answer","React","forwardRef","ctx","lastX","lastY","ref","useContext","RoundContext","mouseDown","handleMouseMove","event","rect","target","getBoundingClientRect","x","clientX","left","y","clientY","top","_drawLine","beginPath","strokeStyle","lineWidth","lineJoin","moveTo","lineTo","closePath","stroke","drawLine","_drawLine2","Object","slicedToArray","useEffect","canvas","current","scale","width","offsetWidth","reverseScale","getContext","fillStyle","fillRect","height","react_default","a","createElement","className","onMouseDown","onMouseMove","e","onMouseUp","undefined","preprocessCanvas","tf","resizeNearestNeighbor","mean","expandDims","toFloat","div","_callee","model","tensor","predictions","results","regenerator_default","wrap","_context","prev","next","then","result","predict","data","sent","Array","from","abrupt","indexOfMax","toString","stop","this","arr","length","max","maxIndex","i","Buttons","_ref","setPrediction","GameContext","onClick","clearCanvas","newPrediction","Confirmation","_ref2","prediction","dispatch","_useContext4","hideRound","question","parseInt","reduce","b","type","console","log","clearRect","Controls","_useState","useState","_useState2","createContext","Question","_question","num1","num2","getRandomNumber","limit","multiple","arguments","randomNumber","Math","floor","random","Round","useRandomNumbers","createRef","Provider","value","src_Answer","src_Controls","initialPoints","pointReducer","pointsState","action","App","_useReducer","useReducer","_useReducer2","points","_useRounds","initialCount","hidden","setHidden","rounds","apply","map","round","index","includes","src_Round","key","toConsumableArray","concat","roundsToGo","useRounds","_useRounds2","unhideAllRounds","gamePlay","playAgain","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","loadModel","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1b11559b.chunk.js","sourcesContent":["import React, { useContext, useEffect } from \"react\";\nimport { RoundContext } from \"./Round.js\";\n\nconst Answer = React.forwardRef(() => {\n  const { ref } = useContext(RoundContext);\n  let ctx;\n  let mouseDown = false;\n  let lastX;\n  let lastY;\n\n  function drawLine(x, y, lastX, lastY) {\n    ctx.beginPath();\n    ctx.strokeStyle = \"#ffffff\";\n    ctx.lineWidth = 12;\n    ctx.lineJoin = \"round\";\n    ctx.moveTo(lastX, lastY);\n    ctx.lineTo(x, y);\n    ctx.closePath();\n    ctx.stroke();\n\n    return [x, y];\n  }\n\n  function handleMouseMove(event) {\n    const rect = event.target.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n\n    if (mouseDown) {\n      [lastX, lastY] = drawLine(x, y, lastX, lastY);\n    }\n  }\n\n  useEffect(() => {\n    const canvas = ref.current;\n    const scale = canvas.width / canvas.offsetWidth;\n    const reverseScale = canvas.offsetWidth / canvas.width;\n\n    ctx = canvas.getContext(\"2d\");\n\n    ctx.scale(scale, scale);\n    ctx.fillStyle = \"#000000\";\n    ctx.fillRect(0, 0, canvas.height, canvas.width);\n\n    return () => ctx.scale(reverseScale, reverseScale);\n  });\n\n  return (\n    <div className=\"canvas-wrapper\">\n      <canvas\n        onMouseDown={() => (mouseDown = true)}\n        onMouseMove={e => handleMouseMove(e)}\n        onMouseUp={() => {\n          mouseDown = false;\n          [lastX, lastY] = [undefined, undefined];\n        }}\n        height={500}\n        ref={ref}\n        width={500}\n      />\n    </div>\n  );\n});\n\nexport default Answer;\n","import * as tf from \"@tensorflow/tfjs\";\n\n// //-----------------------------------------------\n// // preprocess the canvas to be CNN friendly\n// //-----------------------------------------------\nfunction preprocessCanvas(canvas) {\n  // resize the input image to CNN's target size of (1, 28, 28)\n  let tensor = tf\n    .fromPixels(canvas)\n    .resizeNearestNeighbor([28, 28])\n    .mean(2)\n    .expandDims(2)\n    .expandDims()\n    .toFloat();\n  return tensor.div(255.0);\n}\n\nasync function predict(canvas, model) {\n  // preprocess canvas\n  const tensor = preprocessCanvas(canvas);\n  // make predictions on the preprocessed image tensor\n  const predictions = await model.then(result => result.predict(tensor).data());\n\n  // get the model's prediction results\n  const results = Array.from(predictions);\n\n  return indexOfMax(results).toString();\n}\n\nfunction indexOfMax(arr) {\n  if (arr.length === 0) {\n    return -1;\n  }\n\n  var max = arr[0];\n  var maxIndex = 0;\n\n  for (var i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      maxIndex = i;\n      max = arr[i];\n    }\n  }\n\n  return maxIndex;\n}\n\nexport { predict };\n","import React, { useContext, useState } from \"react\";\nimport { predict } from \"./helpers.js\";\nimport { GameContext } from \"./App.js\";\nimport { RoundContext } from \"./Round.js\";\n\nfunction Controls() {\n  const [prediction, setPrediction] = useState();\n\n  if (prediction) {\n    return (\n      <Confirmation prediction={prediction} setPrediction={setPrediction} />\n    );\n  } else {\n    return <Buttons setPrediction={setPrediction} />;\n  }\n}\n\nfunction Buttons({ setPrediction }) {\n  const { model } = useContext(GameContext);\n  const { ref } = useContext(RoundContext);\n\n  return (\n    <div className=\"controls\">\n      <button onClick={() => clearCanvas(ref)}>Clear</button>\n      <button\n        onClick={() => {\n          predict(ref.current, model).then(newPrediction => {\n            setPrediction(newPrediction);\n          });\n        }}\n      >\n        Predict\n      </button>\n    </div>\n  );\n}\n\nfunction Confirmation({ prediction, setPrediction }) {\n  const { dispatch } = useContext(GameContext);\n  const { hideRound, question, ref } = useContext(RoundContext);\n\n  return (\n    <div className=\"response\">\n      <h2>Did you mean <span className=\"is-cursive\">{prediction}</span>&nbsp;?</h2>\n      <div>\n        <button\n          className=\"btn-yes\"\n          onClick={() => {\n            setPrediction(false);\n            parseInt(prediction) === question.reduce((a, b) => a * b)\n              ? dispatch({ type: \"increment\" })\n              : console.log(\"Wrong!\");\n            hideRound();\n            ref.current\n              .getContext(\"2d\")\n              .clearRect(0, 0, ref.current.width, ref.current.height);\n          }}\n        >\n          Yes\n        </button>\n        <button\n          className=\"btn-no\"\n          onClick={() => {\n            setPrediction(false);\n            clearCanvas(ref);\n          }}\n        >\n          No\n        </button>\n      </div>\n    </div>\n  );\n}\n\nfunction clearCanvas(ref) {\n  ref.current\n    .getContext(\"2d\")\n    .fillRect(0, 0, ref.current.width, ref.current.height);\n}\n\nexport default Controls;\n","import React, { useContext } from \"react\";\nimport Answer from \"./Answer.js\";\nimport Controls from \"./Controls.js\";\n\nconst RoundContext = React.createContext({});\n\nfunction Round({ hideRound }) {\n  const question = useRandomNumbers();\n  let ref = React.createRef();\n\n  return (\n    <div className=\"flex-wrapper\">\n      <RoundContext.Provider value={{ hideRound, question, ref }}>\n        <Question />\n        <Answer />\n        <Controls />\n      </RoundContext.Provider>\n    </div>\n  );\n}\n\nfunction Question() {\n  const { question } = useContext(RoundContext);\n  const [num1, num2] = question;\n  return (\n    <div className=\"question\">\n      <span>{num1}</span>\n      <h3>x</h3>\n      <span>{num2}</span>\n      <h3>=</h3>\n    </div>\n  );\n}\n\nfunction useRandomNumbers() {\n  const limit = 9;\n  const num1 = getRandomNumber(limit);\n  const num2 = getRandomNumber(limit, num1);\n  return [num1, num2];\n}\n\nfunction getRandomNumber(limit, multiple = 0) {\n  const randomNumber = Math.floor(Math.random() * limit);\n  if (randomNumber * multiple < 10) {\n    return randomNumber;\n  }\n  return getRandomNumber(limit, multiple);\n}\n\nexport default Round;\nexport { RoundContext };\n","import React, { useReducer, useState } from \"react\";\nimport Round from \"./Round.js\";\nimport \"./App.css\";\n\nconst GameContext = React.createContext({});\n\nconst initialPoints = 0;\n\nfunction pointReducer(pointsState, action) {\n  switch (action.type) {\n    case \"reset\":\n      return initialPoints;\n    case \"increment\":\n      return pointsState + 1;\n    case \"decrement\":\n      return pointsState - 1;\n    default:\n      return pointsState;\n  }\n}\n\nfunction App({ model }) {\n  const [points, dispatch] = useReducer(pointReducer, initialPoints);\n  const [rounds, roundsToGo, unhideAllRounds] = useRounds(4);\n\n  const gamePlay = (\n    <div>\n      <h1>TableTests</h1>\n      <div className=\"score\">\n        <h2>\n          <span className=\"is-green\">{points}</span> correct &amp;&nbsp;\n          {roundsToGo} to go!\n        </h2>\n      </div>\n      {rounds}\n    </div>\n  );\n\n  const playAgain = (\n    <div className=\"response-wrapper\">\n      <div className=\"response\">\n        <h1>\n          {points >= rounds.length / 2 ? \"You win!\" : \"You lose.\"}\n          <br />\n          <span className=\"is-green\">Play again!</span>\n        </h1>\n        <button\n          onClick={() => {\n            dispatch({ type: \"reset\" }); // reset the score\n            unhideAllRounds();\n          }}\n        >\n          <span>&#10157;</span>\n        </button>\n      </div>\n    </div>\n  );\n\n  return (\n    <GameContext.Provider value={{ dispatch, model }}>\n      {roundsToGo !== 0 ? gamePlay : playAgain}\n    </GameContext.Provider>\n  );\n}\n\nfunction useRounds(initialCount) {\n  const [hidden, setHidden] = useState([]);\n\n  const rounds = Array.apply(null, { length: initialCount }).map(\n    (round, index) =>\n      hidden.includes(index) ? null : (\n        <Round\n          key={index}\n          hideRound={() => {\n            setHidden([...hidden, index]);\n          }}\n        />\n      )\n  );\n\n  const roundsToGo = initialCount - hidden.length;\n\n  return [rounds, roundsToGo, () => setHidden([])];\n}\n\nexport default App;\nexport { GameContext };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nasync function loadModel() {\n  console.log(\"Model loading...\");\n  // load the model using a HTTPS request (where you have stored your model files)\n  return await tf\n    .loadModel(\"https://gogul09.github.io/models/digitrecognizercnn/model.json\")\n    .then(console.log(\"Loaded.\"));\n}\n\nReactDOM.render(<App model={loadModel()} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}